/**
 * @typedef {import("@onflow/typedefs").Block} Block
 */
/**
 * @description Returns the latest block (optionally sealed or not), by id, or by height
 * @param {object} [queryOptions] - Query parameters
 * @param {boolean} [queryOptions.sealed] - Whether to query for a sealed block
 * @param {number} [queryOptions.height] - Block height to query
 * @param {string} [queryOptions.id] - Block ID to query
 * @param {object} [opts] - Optional parameters
 * @returns {Promise<Block>} - A promise that resolves to a block response
 */
export function block({ sealed, id, height }?: {
    sealed?: boolean | undefined;
    height?: number | undefined;
    id?: string | undefined;
} | undefined, opts?: object | undefined): Promise<Block>;
export type Block = import("@onflow/typedefs").Block;
