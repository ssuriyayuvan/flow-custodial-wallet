(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@onflow/util-logger')) :
  typeof define === 'function' && define.amd ? define(['exports', '@onflow/util-logger'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["onflowUtil-template"] = {}, global.utilLogger));
})(this, (function (exports, utilLogger) { 'use strict';

  /**
   * Interleaves two arrays
   * @param a - The first array
   * @param b - The second array
   * @param c - The target array
   * @returns The interleaved array
   */
  function interleave() {
    let a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    if (!a.length && !b.length) return c;
    if (!a.length) return c;
    if (!b.length) {
      c.push(...a);
      return c;
    }
    const [aHead, ...aRest] = a;
    const [bHead, ...bRest] = b;
    if (aHead !== undefined) c.push(aHead);
    if (bHead !== undefined) c.push(bHead);
    return interleave(aRest, bRest, c);
  }

  /**
   * Recursively apply a value to a function
   * @param d - The value to apply
   * @returns A function that takes a function and applies the value to it
   */
  function recApply(d) {
    return function (arg1) {
      if (typeof arg1 === "function") {
        utilLogger.log.deprecate({
          pkg: "FCL/SDK",
          subject: "Interopolation of functions into template literals",
          transition: "https://github.com/onflow/flow-js-sdk/blob/master/packages/sdk/TRANSITIONS.md#0001-deprecate-params"
        });
        return recApply(d)(arg1(d));
      }
      return String(arg1);
    };
  }

  /**
   * Creates a template function
   * @param head - A string, template string array, or template function
   * @param rest - The rest of the arguments
   * @returns A template function
   */
  function template(head) {
    for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      rest[_key - 1] = arguments[_key];
    }
    if (typeof head === "string") return () => head;
    if (typeof head === "function") return head;
    return x => interleave([...head], rest.map(recApply(x))).join("").trim();
  }

  exports.interleave = interleave;
  exports.template = template;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=template.umd.js.map
