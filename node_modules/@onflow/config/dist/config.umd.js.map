{"version":3,"file":"config.umd.js","sources":["../src/utils/utils.ts","../src/config.ts"],"sourcesContent":["type FlowNetwork = \"emulator\" | \"testnet\" | \"mainnet\" | \"previewnet\"\nexport interface FlowJson {\n  networks?: {\n    [key in FlowNetwork]?: string\n  }\n  accounts?: {\n    [key: string]: {\n      address: string\n      key?: string | object\n    }\n  }\n  contracts?: {\n    [key: string]: {\n      source: string\n      aliases: {\n        [key in FlowNetwork]?: string\n      }\n    }\n  }\n  dependencies?: {\n    [key: string]: {\n      source: string\n      hash: string\n      aliases: {\n        [key in FlowNetwork]?: string\n      }\n    }\n  }\n  deployments?: {\n    [key in FlowNetwork]?: {\n      [contract: string]: string[]\n    }\n  }\n}\n\nconst pipe =\n  (...funcs: ((v: any) => any)[]) =>\n  (v: any) => {\n    return funcs.reduce((res, func) => {\n      return func(res)\n    }, v)\n  }\n\n/***\n * Merge multiple functions returning objects into one object.\n * @param funcs - Functions to merge\n * @return Merged object\n */\nconst mergePipe =\n  (...funcs: ((v: any) => any)[]) =>\n  (v: any) => {\n    return funcs.reduce((res, func) => {\n      return {...res, ...func(v)}\n    }, {})\n  }\n\n/**\n * @description Object check\n * @param value - Value to check\n * @returns Is object status\n */\nconst isObject = <T>(value: T): boolean =>\n  value && typeof value === \"object\" && !Array.isArray(value)\n\n/**\n * @description Deep merge multiple objects.\n * @param target - Target object\n * @param sources - Source objects\n * @returns Merged object\n */\nconst mergeDeep = (target: any, ...sources: any[]): any => {\n  if (!sources.length) return target\n  const source = sources.shift()\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) Object.assign(target, {[key]: {}})\n        mergeDeep(target[key], source[key])\n      } else {\n        Object.assign(target, {[key]: source[key]})\n      }\n    }\n  }\n\n  return mergeDeep(target, ...sources)\n}\n\n/**\n * @description Support if/then/else behavior in a function way.\n * @param testFn - Function to test\n * @param posCond - Function to run if testFn is true\n * @param negCond - Function to run it testFn is false\n * @returns Function that returns the result of posCond or negCond\n */\nexport const ifElse =\n  <T, U>(testFn: (v: T) => U, posCond: (v: T) => U, negCond: (v: T) => U) =>\n  (v: T) =>\n    testFn(v) ? posCond(v) : negCond(v)\n\n/**\n * @description Deep merge multiple Flow JSON.\n * @param value - Flow JSON or array of Flow JSONs\n * @returns Merged Flow JSON\n */\nconst mergeFlowJSONs = (value: FlowJson | FlowJson[]) =>\n  Array.isArray(value) ? mergeDeep({}, ...value) : value\n\n/**\n * @description Filter out contracts section of flow.json.\n * @param obj - Flow JSON\n * @returns Contracts section of Flow JSON\n */\nconst filterContracts = (obj: FlowJson) => (obj.contracts ? obj.contracts : {})\n\n/**\n * @description Filter out dependencies section of flow.json.\n * @param obj - Flow JSON\n * @returns Dependencies section of Flow JSON\n */\nconst filterDependencies = (obj: FlowJson) =>\n  obj.dependencies ? obj.dependencies : {}\n\n/**\n * @description Gathers contract addresses by network\n * @param network - Network to gather addresses for\n * @returns Contract names by addresses mapping e.g { \"HelloWorld\": \"0x123\" }\n */\nconst mapContractAliasesToNetworkAddress =\n  (network: string) => (contracts: Record<string, any>) => {\n    return Object.entries(contracts).reduce(\n      (c, [key, value]) => {\n        const networkContractAlias = value?.aliases?.[network]\n        if (networkContractAlias) {\n          c[key] = networkContractAlias\n        }\n\n        return c\n      },\n      {} as Record<string, string>\n    )\n  }\n\n/**\n * @description Gathers dependency addresses by network\n * @param network - Network to gather addresses for\n * @returns Dependency names by addresses mapping e.g { \"HelloWorld\": \"0x123\" }\n */\nconst mapDependencyAliasesToNetworkAddress =\n  (network: string) => (dependencies: Record<string, any>) => {\n    return Object.entries(dependencies).reduce(\n      (c, [key, value]) => {\n        const networkDependencyAlias = value?.aliases?.[network]\n        if (networkDependencyAlias) {\n          c[key] = networkDependencyAlias\n        }\n\n        return c\n      },\n      {} as Record<string, string>\n    )\n  }\n\nconst mapDeploymentsToNetworkAddress =\n  (network: FlowNetwork) =>\n  ({\n    deployments = {},\n    accounts = {},\n  }: Pick<FlowJson, \"deployments\" | \"accounts\">) => {\n    const networkDeployment = deployments?.[network]\n    if (!networkDeployment) return {}\n\n    return Object.entries(networkDeployment).reduce((c, [key, value]) => {\n      // Resolve account address\n      const accountAddress = accounts[key]?.address\n      if (!accountAddress) return c\n\n      // Create an object assigning the address to the contract name.\n      return value.reduce((c, contract) => {\n        return {...c, [contract]: accountAddress}\n      }, {})\n    }, {})\n  }\n\n/**\n * @description Take in flow.json files and return contract to address mapping by network\n * @param jsons - Flow JSON or array of Flow JSONs\n * @param network - Network to gather addresses for\n * @returns Contract names by addresses mapping e.g { \"HelloWorld\": \"0x123\" }\n */\nexport const getContracts = (\n  jsons: FlowJson | FlowJson[],\n  network: FlowNetwork\n) => {\n  return pipe(\n    mergeFlowJSONs,\n    mergePipe(\n      mapDeploymentsToNetworkAddress(network),\n      pipe(filterContracts, mapContractAliasesToNetworkAddress(network)),\n      pipe(filterDependencies, mapDependencyAliasesToNetworkAddress(network))\n    )\n  )(jsons)\n}\n\n/**\n * @description Checks if string is hexidecimal\n * @param str - String to check\n * @returns Is hexidecimal status\n */\nconst isHexidecimal = (str: unknown) => {\n  // Check that it is a string\n  if (typeof str !== \"string\") return false\n  return /^[0-9A-Fa-f]+$/.test(str)\n}\n\n/**\n * @description Checks flow.json file for private keys\n * @param flowJSON - Flow JSON\n * @returns Has private keys status\n */\nconst hasPrivateKeys = (flowJSON: FlowJson) => {\n  return Object.entries(flowJSON?.accounts ?? []).reduce(\n    (hasPrivateKey, [, value]) => {\n      if (hasPrivateKey) return true\n      return (\n        value &&\n        Object.prototype.hasOwnProperty.call(value, \"key\") &&\n        isHexidecimal(value?.key)\n      )\n    },\n    false\n  )\n}\n\n/**\n * @description Take in flow.json or array of flow.json files and checks for private keys\n * @param value - Flow JSON or array of Flow JSONs\n * @returns Has private keys status\n */\nexport const anyHasPrivateKeys = (value: FlowJson | FlowJson[]) => {\n  if (Array.isArray(value)) return value.some(hasPrivateKeys)\n  return hasPrivateKeys(value)\n}\n\n/**\n * @description Format network to always be 'emulator', 'testnet', 'previewnet' or 'mainnet'\n * @param network - Network to format\n * @returns Formatted network name (either 'emulator', 'testnet', 'previewnet' or 'mainnet')\n */\nexport const cleanNetwork = (network: string): FlowNetwork => {\n  const cleanedNetwork =\n    network?.toLowerCase() === \"local\" ? \"emulator\" : network?.toLowerCase()\n  if (\n    cleanedNetwork === \"emulator\" ||\n    cleanedNetwork === \"testnet\" ||\n    cleanedNetwork === \"mainnet\" ||\n    cleanedNetwork === \"previewnet\"\n  )\n    return cleanedNetwork\n\n  throw new Error(\n    `Invalid network \"${network}\". Must be one of \"emulator\", \"local\", \"testnet\", or \"mainnet\"`\n  )\n}\n","import {\n  spawn,\n  send,\n  subscriber,\n  SUBSCRIBE,\n  UNSUBSCRIBE,\n  ActorHandlers,\n} from \"@onflow/util-actor\"\nimport * as logger from \"@onflow/util-logger\"\nimport {invariant} from \"@onflow/util-invariant\"\nimport {getContracts, cleanNetwork, anyHasPrivateKeys} from \"./utils/utils\"\n\n// Inject config into logger to break circular dependency\nlogger.setConfig(config)\n\nconst NAME = \"config\"\nconst PUT = \"PUT_CONFIG\"\nconst GET = \"GET_CONFIG\"\nconst GET_ALL = \"GET_ALL_CONFIG\"\nconst UPDATE = \"UPDATE_CONFIG\"\nconst DELETE = \"DELETE_CONFIG\"\nconst CLEAR = \"CLEAR_CONFIG\"\nconst WHERE = \"WHERE_CONFIG\"\nconst UPDATED = \"CONFIG/UPDATED\"\n\nconst identity = <T>(v: T) => v\n\nconst HANDLERS: ActorHandlers = {\n  [PUT]: (ctx, _letter, {key, value}) => {\n    if (key == null) throw new Error(\"Missing 'key' for config/put.\")\n    ctx.put(key, value)\n    ctx.broadcast(UPDATED, {...ctx.all()})\n  },\n  [GET]: (ctx, letter, {key, fallback}) => {\n    if (key == null) throw new Error(\"Missing 'key' for config/get\")\n    letter.reply(ctx.get(key, fallback))\n  },\n  [GET_ALL]: (ctx, letter) => {\n    letter.reply({...ctx.all()})\n  },\n  [UPDATE]: (ctx, letter, {key, fn}) => {\n    if (key == null) throw new Error(\"Missing 'key' for config/update\")\n    ctx.update(key, fn || identity)\n    ctx.broadcast(UPDATED, {...ctx.all()})\n  },\n  [DELETE]: (ctx, letter, {key}) => {\n    if (key == null) throw new Error(\"Missing 'key' for config/delete\")\n    ctx.delete(key)\n    ctx.broadcast(UPDATED, {...ctx.all()})\n  },\n  [CLEAR]: ctx => {\n    const keys = Object.keys(ctx.all())\n    for (const key of keys) ctx.delete(key)\n    ctx.broadcast(UPDATED, {...ctx.all()})\n  },\n  [WHERE]: (ctx, letter, {pattern}) => {\n    if (pattern == null) throw new Error(\"Missing 'pattern' for config/where\")\n    letter.reply(ctx.where(pattern))\n  },\n  [SUBSCRIBE]: (ctx, letter) => {\n    ctx.subscribe(letter.from)\n    ctx.send(letter.from, UPDATED, {...ctx.all()})\n  },\n  [UNSUBSCRIBE]: (ctx, letter) => {\n    ctx.unsubscribe(letter.from)\n  },\n}\n\nspawn(HANDLERS, NAME)\n\n/**\n * @description Adds a key-value pair to the config\n * @param key - The key to add\n * @param value - The value to add\n * @returns The config object\n */\nfunction put<T>(key: string, value: T) {\n  send(NAME, PUT, {key, value})\n  return config()\n}\n\n/**\n * @description Gets a key-value pair with a fallback from the config\n * @param key - The key to add\n * @param fallback - The fallback value to return if key is not found\n * @returns The value found at key or fallback\n */\nfunction get<T>(key: string, fallback?: T): Promise<T> {\n  return send(NAME, GET, {key, fallback}, {expectReply: true, timeout: 10})\n}\n\n/**\n * @description Returns the first non null config value or the fallback\n * @param wants - The keys to search for\n * @param fallback - The fallback value to return if key is not found\n * @returns The value found at key or fallback\n */\nasync function first<T>(wants: string[] = [], fallback: T): Promise<T> {\n  if (!wants.length) return fallback\n  const [head, ...rest] = wants\n  const ret = await get<T>(head)\n  if (ret == null) return first(rest, fallback)\n  return ret\n}\n\n/**\n * @description Returns the current config\n * @returns The config object\n */\nfunction all(): Promise<Record<string, unknown>> {\n  return send(NAME, GET_ALL, null, {expectReply: true, timeout: 10})\n}\n\n/**\n * @description Updates a key-value pair in the config\n * @param key - The key to update\n * @param fn - The function to update the value with\n * @returns The config object\n */\nfunction update<T>(key: string, fn: (x: T) => T = identity) {\n  send(NAME, UPDATE, {key, fn})\n  return config()\n}\n\n/**\n * @description Deletes a key-value pair from the config\n * @param key - The key to delete\n * @returns The config object\n */\nfunction _delete(key: string) {\n  send(NAME, DELETE, {key})\n  return config()\n}\n\n/**\n * @description Returns a subset of the config based on a pattern\n * @param pattern - The pattern to match keys against\n * @returns The subset of the config\n */\nfunction where(pattern: RegExp): Promise<Record<string, unknown>> {\n  return send(NAME, WHERE, {pattern}, {expectReply: true, timeout: 10})\n}\n\n/**\n * @description Subscribes to config updates\n * @param callback - The callback to call when config is updated\n * @returns The unsubscribe function\n */\nfunction subscribe(\n  callback: (\n    config: Record<string, unknown> | null,\n    error: Error | null\n  ) => void\n): () => void {\n  return subscriber(NAME, () => spawn(HANDLERS, NAME), callback)\n}\n\n/**\n * @description Clears the config\n */\nexport async function clearConfig(): Promise<void> {\n  await send(NAME, CLEAR)\n}\n\n/**\n * @description Resets the config to a previous state\n * @param oldConfig - The previous config state\n * @returns The config object\n */\nasync function resetConfig(oldConfig: Record<string, unknown>) {\n  return clearConfig().then(() => config(oldConfig))\n}\n\n/**\n * @description Takes in flow.json or array of flow.json files and creates contract placeholders\n * @param data - The data to load\n * @param data.flowJSON - The flow.json or array of flow.json files\n */\nasync function load(data: {\n  flowJSON: Record<string, unknown> | Record<string, unknown>[]\n}) {\n  const network: string = await get(\"flow.network\")\n  const cleanedNetwork = cleanNetwork(network)\n  const {flowJSON} = data\n\n  invariant(Boolean(flowJSON), \"config.load -- 'flowJSON' must be defined\")\n\n  invariant(\n    !!cleanedNetwork,\n    `Flow Network Required -- In order for FCL to load your contracts please define \"flow.network\" to \"emulator\", \"local\", \"testnet\", or \"mainnet\" in your config. See more here: https://developers.flow.com/tools/fcl-js/reference/configure-fcl`\n  )\n\n  if (anyHasPrivateKeys(flowJSON)) {\n    const isEmulator = cleanedNetwork === \"emulator\"\n\n    logger.log({\n      title: \"Private Keys Detected\",\n      message: `Private keys should be stored in a separate flow.json file for security. See more here: https://developers.flow.com/tools/flow-cli/security`,\n      level: isEmulator ? logger.LEVELS.warn : logger.LEVELS.error,\n    })\n\n    invariant(\n      isEmulator,\n      `Private keys should be stored in a separate flow.json file for security. See more here: https://developers.flow.com/tools/flow-cli/security`\n    )\n  }\n\n  for (const [key, value] of Object.entries(\n    getContracts(flowJSON, cleanedNetwork)\n  )) {\n    const contractConfigKey = `0x${key}`\n    const existingContractConfigKey = await get(contractConfigKey)\n    if (existingContractConfigKey && existingContractConfigKey !== value) {\n      logger.log({\n        title: \"Contract Placeholder Conflict Detected\",\n        message: `A generated contract placeholder from config.load conflicts with a placeholder you've set manually in config have the same name.`,\n        level: logger.LEVELS.warn,\n      })\n    } else {\n      put(contractConfigKey, value)\n    }\n\n    const systemContractConfigKey = `system.contracts.${key}`\n    const systemExistingContractConfigKeyValue = await get(\n      systemContractConfigKey\n    )\n    if (\n      systemExistingContractConfigKeyValue &&\n      systemExistingContractConfigKeyValue !== value\n    ) {\n      logger.log({\n        title: \"Contract Placeholder Conflict Detected\",\n        message: `A generated contract placeholder from config.load conflicts with a placeholder you've set manually in config have the same name.`,\n        level: logger.LEVELS.warn,\n      })\n    } else {\n      put(systemContractConfigKey, value)\n    }\n  }\n}\n\n/**\n * @description Sets the config\n * @param values - The values to set\n * @returns The config object\n */\nfunction config(values?: Record<string, unknown>) {\n  if (values != null && typeof values === \"object\") {\n    Object.keys(values).map(d => put(d, values[d]))\n  }\n\n  return {\n    put,\n    get,\n    all,\n    first,\n    update,\n    delete: _delete,\n    where,\n    subscribe,\n    overload,\n    load,\n  }\n}\n\nconfig.put = put\nconfig.get = get\nconfig.all = all\nconfig.first = first\nconfig.update = update\nconfig.delete = _delete\nconfig.where = where\nconfig.subscribe = subscribe\nconfig.overload = overload\nconfig.load = load\n\nexport {config}\n\n/**\n * @description Temporarily overloads the config with the given values and calls the callback\n * @param values - The values to overload the config with\n * @param callback - The callback to call with the overloaded config\n * @returns The result of the callback\n */\nasync function overload<T>(\n  values: Record<string, unknown>,\n  callback: (oldConfig: Record<string, unknown>) => T\n) {\n  const oldConfig = await all()\n  try {\n    config(values)\n    const result = await callback(await all())\n    return result\n  } finally {\n    await resetConfig(oldConfig)\n  }\n}\n"],"names":["pipe","_len","arguments","length","funcs","Array","_key","v","reduce","res","func","mergePipe","_len2","_key2","isObject","value","isArray","mergeDeep","target","_len3","sources","_key3","source","shift","key","Object","assign","mergeFlowJSONs","filterContracts","obj","contracts","filterDependencies","dependencies","mapContractAliasesToNetworkAddress","network","entries","c","_ref","networkContractAlias","aliases","mapDependencyAliasesToNetworkAddress","_ref2","networkDependencyAlias","mapDeploymentsToNetworkAddress","_ref3","deployments","accounts","networkDeployment","_ref4","accountAddress","address","contract","getContracts","jsons","isHexidecimal","str","test","hasPrivateKeys","flowJSON","hasPrivateKey","_ref5","prototype","hasOwnProperty","call","anyHasPrivateKeys","some","cleanNetwork","cleanedNetwork","toLowerCase","Error","logger","setConfig","config","NAME","PUT","GET","GET_ALL","UPDATE","DELETE","CLEAR","WHERE","UPDATED","identity","HANDLERS","ctx","_letter","put","broadcast","all","letter","fallback","reply","get","fn","update","delete","keys","pattern","where","SUBSCRIBE","subscribe","from","send","UNSUBSCRIBE","unsubscribe","spawn","expectReply","timeout","first","wants","undefined","head","rest","ret","_delete","callback","subscriber","clearConfig","resetConfig","oldConfig","then","load","data","invariant","Boolean","isEmulator","log","title","message","level","LEVELS","warn","error","contractConfigKey","existingContractConfigKey","systemContractConfigKey","systemExistingContractConfigKeyValue","values","map","d","overload","result"],"mappings":"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"}