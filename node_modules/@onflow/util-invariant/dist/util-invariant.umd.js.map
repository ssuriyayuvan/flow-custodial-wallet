{"version":3,"file":"util-invariant.umd.js","sources":["../src/index.ts"],"sourcesContent":["/**\n * Asserts fact is true, otherwise throw an error with invariant message\n * @param fact\n * @param msg\n * @param rest\n */\nexport function invariant(\n  fact: boolean,\n  msg: string,\n  ...rest: any[]\n): asserts fact {\n  if (!fact) {\n    const error = new Error(`INVARIANT ${msg}`)\n    error.stack = error.stack\n      ?.split(\"\\n\")\n      ?.filter(d => !/at invariant/.test(d))\n      ?.join(\"\\n\")\n    console.error(\"\\n\\n---\\n\\n\", error, \"\\n\\n\", ...rest, \"\\n\\n---\\n\\n\")\n    throw error\n  }\n}\n"],"names":["invariant","fact","msg","error","Error","stack","split","filter","d","test","join","_len","arguments","length","rest","Array","_key","console"],"mappings":";;;;;;EAAA;EACA;EACA;EACA;EACA;EACA;EACO,SAASA,SAASA,CACvBC,IAAa,EACbC,GAAW,EAEG;IACd,IAAI,CAACD,IAAI,EAAE;MACT,MAAME,KAAK,GAAG,IAAIC,KAAK,CAAE,CAAYF,UAAAA,EAAAA,GAAI,EAAC,CAAC,CAAA;EAC3CC,IAAAA,KAAK,CAACE,KAAK,GAAGF,KAAK,CAACE,KAAK,EACrBC,KAAK,CAAC,IAAI,CAAC,EACXC,MAAM,CAACC,CAAC,IAAI,CAAC,cAAc,CAACC,IAAI,CAACD,CAAC,CAAC,CAAC,EACpCE,IAAI,CAAC,IAAI,CAAC,CAAA;MAAA,KAAAC,IAAAA,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAPbC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,GAAAA,CAAAA,GAAAA,IAAA,WAAAK,IAAA,GAAA,CAAA,EAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA,EAAA,EAAA;EAAJF,MAAAA,IAAI,CAAAE,IAAA,GAAAJ,CAAAA,CAAAA,GAAAA,SAAA,CAAAI,IAAA,CAAA,CAAA;EAAA,KAAA;EAQLC,IAAAA,OAAO,CAACd,KAAK,CAAC,aAAa,EAAEA,KAAK,EAAE,MAAM,EAAE,GAAGW,IAAI,EAAE,aAAa,CAAC,CAAA;EACnE,IAAA,MAAMX,KAAK,CAAA;EACb,GAAA;EACF;;;;;;;;;;"}