{"version":3,"file":"typedefs.umd.js","sources":["../src/interaction.ts","../src/index.ts"],"sourcesContent":["export enum InteractionTag {\n  UNKNOWN = \"UNKNOWN\",\n  SCRIPT = \"SCRIPT\",\n  TRANSACTION = \"TRANSACTION\",\n  GET_TRANSACTION_STATUS = \"GET_TRANSACTION_STATUS\",\n  GET_ACCOUNT = \"GET_ACCOUNT\",\n  GET_EVENTS = \"GET_EVENTS\",\n  PING = \"PING\",\n  GET_TRANSACTION = \"GET_TRANSACTION\",\n  GET_BLOCK = \"GET_BLOCK\",\n  GET_BLOCK_HEADER = \"GET_BLOCK_HEADER\",\n  GET_COLLECTION = \"GET_COLLECTION\",\n  GET_NETWORK_PARAMETERS = \"GET_NETWORK_PARAMETERS\",\n  SUBSCRIBE_EVENTS = \"SUBSCRIBE_EVENTS\",\n  GET_NODE_VERSION_INFO = \"GET_NODE_VERSION_INFO\",\n}\n\nexport enum InteractionStatus {\n  BAD = \"BAD\",\n  OK = \"OK\",\n}\n\nexport enum TransactionRole {\n  AUTHORIZER = \"authorizer\",\n  PAYER = \"payer\",\n  PROPOSER = \"proposer\",\n}\n\nexport enum InteractionResolverKind {\n  ARGUMENT = \"ARGUMENT\",\n  ACCOUNT = \"ACCOUNT\",\n}\n\nexport interface InteractionAccount {\n  kind: InteractionResolverKind.ACCOUNT\n  tempId: string\n  addr: string | null\n  keyId: number | string | null\n  sequenceNum: number | null\n  signature: string | null\n  signingFunction: any | null\n  resolve: any | null\n  role: {\n    proposer: boolean\n    authorizer: boolean\n    payer: boolean\n    param?: boolean\n  }\n  authorization: any\n}\n\nexport interface Interaction {\n  tag: InteractionTag\n  assigns: Record<string, any>\n  status: InteractionStatus\n  reason: string | null\n  accounts: Record<string, InteractionAccount>\n  params: Record<string, any>\n  arguments: Record<string, any>\n  message: {\n    cadence: string | null\n    refBlock: string | null\n    computeLimit: string | null\n    proposer: string | null\n    payer: string | null\n    authorizations: string[]\n    params: Record<string, any>[]\n    arguments: string[]\n  }\n  proposer: string | null\n  authorizations: string[]\n  payer: string[]\n  events: {\n    eventType: string | null\n    start: string | null\n    end: string | null\n    blockIds: string[]\n  }\n  transaction: {\n    id: string | null\n  }\n  block: {\n    id: string | null\n    height: string | null\n    isSealed: boolean | null\n  }\n  account: {\n    addr: string | null\n  }\n  collection: {\n    id: string | null\n  },\n  subscribeEvents: {\n    eventTypes: string[] | null\n    addresses: string[] | null\n    contracts: string[] | null\n    startBlockId: string | null\n    startHeight: number | null\n    heartbeatInterval: number | null\n  }\n}\n","export type Account = {\n  /**\n   * - The address of the account\n   */\n  address: string\n  /**\n   * - The FLOW balance of the account in 10^8\n   */\n  balance: number\n  /**\n   * - The code of any Cadence contracts stored in the account\n   */\n  code: number\n  /**\n   * - Any contracts deployed to this account\n   */\n  contracts: Record<string, string>\n  /**\n   * - The keys associated with the account\n   */\n  keys: Array<AccountKey>\n}\n\nexport type AccountKey = {\n  /**\n   * - The index of the key in the account\n   */\n  index: number\n  /**\n   * - The public key of the account key\n   */\n  publicKey: string\n  /**\n   * - The signature algorithm used by the key\n   */\n  signAlgo: SignatureAlgorithm\n  /**\n   * - The signature algorithm used by the key as a string\n   */\n  signAlgoString: string\n  /**\n   * - The hashing algorithm used by the key\n   */\n  hashAlgo: HashAlgorithm\n  /**\n   * - The hashing algorithm used by the key as a string\n   */\n  hashAlgoString: string\n  /**\n   * - The sequence number of the key\n   */\n  sequenceNumber: number\n  /**\n   * - The weight of the key\n   */\n  weight: number\n  /**\n   * - Whether or not the key has been revoked\n   */\n  revoked: boolean\n}\n\nexport enum SignatureAlgorithm {\n  ECDSA_P256 = 1,\n  ECDSA_secp256k1 = 2,\n  BLS_BLS12_381 = 3,\n}\n\nexport enum HashAlgorithm {\n  SHA2_256 = 1,\n  SHA2_384 = 2,\n  SHA3_256 = 3,\n  SHA3_384 = 4,\n  KMAC128_BLS_BLS12_381 = 5,\n}\n\nexport type Block = {\n  /**\n   * - The id of the block\n   */\n  id: string\n  /**\n   * - The id of the parent block\n   */\n  parentId: string\n  /**\n   * - The height of the block\n   */\n  height: number\n  /**\n   * - Time related fields\n   */\n  timestamp: string\n  /**\n   * - Contains the ids of collections included in the block\n   */\n  collectionGuarantees: Array<CollectionGuarantee>\n  /**\n   * - The details of which nodes executed and sealed the blocks\n   */\n  blockSeals: Array<BlockSeal>\n  /**\n   * - The cryptographic signature of the block\n   */\n  signatures: Array<number>\n}\nexport type CollectionGuarantee = {\n  /**\n   * - The id of the block\n   */\n  collectionId: string\n  /**\n   * - The signer ids of the block\n   */\n  signerIds: Array<object>\n}\nexport type BlockSeal = {\n  /**\n   * - The id of the block\n   */\n  blockId: string\n  /**\n   * - The execution receipt id of the block\n   */\n  executionReceiptId: string\n}\nexport type CompositeSignature = {\n  /**\n   * - A type identifier used internally by FCL\n   */\n  f_type: string\n  /**\n   * - FCL protocol version\n   */\n  f_vsn: string\n  /**\n   * - Flow Address (sans prefix)\n   */\n  addr: string\n  /**\n   * - Key ID\n   */\n  keyId: number\n  /**\n   * - Signature as a hex string\n   */\n  signature: string\n}\nexport type CurrentUser = {\n  /**\n   * - The public address of the current user\n   */\n  addr?: string\n  /**\n   * - A wallet specified content identifier for user metadata\n   */\n  cid?: string\n  /**\n   * - A wallet specified time-frame for a valid session\n   */\n  expiresAt?: number\n  /**\n   * - A type identifier used internally by FCL\n   */\n  f_type: string\n  /**\n   * - FCL protocol version\n   */\n  f_vsn: string\n  /**\n   * - Whether or not the current user is logged in\n   */\n  loggedIn?: boolean\n  /**\n   * - A list of trusted services that express ways of interacting with the current user's identity\n   */\n  services: Array<object>\n}\nexport type Event = {\n  /**\n   * - ID of the block that contains the event.\n   */\n  blockId: string\n  /**\n   * - Height of the block that contains the event.\n   */\n  blockHeight: number\n  /**\n   * - The timestamp of when the block was sealed in a DateString format. eg. '2021-06-25T13:42:04.227Z'\n   */\n  blockTimestamp: string\n  /**\n   * - A string containing the event name.\n   */\n  type: string\n  /**\n   * - Can be used to query transaction information, eg. via a Flow block explorer.\n   */\n  transactionId: string\n  /**\n   * - Used to prevent replay attacks.\n   */\n  transactionIndex: number\n  /**\n   * - Used to prevent replay attacks.\n   */\n  eventIndex: number\n  /**\n   * - The data emitted from the event.\n   */\n  data: any\n}\nexport type Key = {\n  /**\n   * - Sequence number of key used by the proposer of this transaction\n   */\n  sequenceNumber: number\n  /**\n   * - The ID of the key in the account used by the proposer of this transaction\n   */\n  keyId: number\n  /**\n   * - The address of the proposer of this transaction\n   */\n  address: string\n}\nexport type Service = {\n  /**\n   * - A type identifier used internally by FCL\n   */\n  f_type: string\n  /**\n   * - FCL protocol version\n   */\n  f_vsn: string\n  /**\n   * - Service type\n   */\n  type: string\n  /**\n   * - Service method\n   */\n  method: string\n  /**\n   * - Service uid\n   */\n  uid?: string\n  /**\n   * - Service endpoint\n   */\n  endpoint: string\n  /**\n   * - Service provider object\n   */\n  provider: Provider\n\n  params: Record<string, string>\n}\nexport type Signature = {\n  /**\n   * - Sequence number of the key used to perform this signature.\n   */\n  sequenceNumber: string\n  /**\n   * - ID of the key in the account used to perform this signature.\n   */\n  keyId: number\n  /**\n   * - The signature represented as a hex string.\n   */\n  signature: string\n}\nexport type Transaction = {\n  /**\n   * - The Cadence code used to execute this transaction.\n   */\n  script: string\n  /**\n   * - The JSON-CDC encoded arguments passed in to the transaction.\n   */\n  args: Array<string>\n  /**\n   * - The reference block id for this transaction.\n   */\n  referenceBlockId: string\n  /**\n   * - The gas limit for the transaction.\n   */\n  gasLimit: number\n  /**\n   * - The key used by the proposer of this transaction.\n   */\n  proposalKey: Key\n  /**\n   * - Sequence number of the key used by the proposer of this transaction.\n   */\n  sequenceNumber: string\n  /**\n   * - The ID of the key in the account used by the proposer of this transaction.\n   */\n  keyId: number\n  /**\n   * - The address of the proposer of this transaction.\n   */\n  address: string\n  /**\n   * - Address of the payer of the transaction.\n   */\n  payer: string\n  /**\n   * - Address of the proposer of this transaction.\n   */\n  proposer: string\n  /**\n   * - Array of addresses of authorizers of this transaction.\n   */\n  authorizers: Array<string>\n  /**\n   * - The payload signatures for the transaction.\n   */\n  payloadSignatures: Array<Signature>\n  /**\n   * - The envelope signatures for the transaction.\n   */\n  envelopeSignatures: Array<Signature>\n}\nexport type TransactionStatus = {\n  /**\n   * - The ID of the Block the transaction is included in.\n   */\n  blockId: string\n  /**\n   * - The status code of the transaction.\n   */\n  status: number\n  /**\n   * - The status as as descriptive text (e.g. \"FINALIZED\").\n   */\n  statusString: string\n  /**\n   * - The error message of the transaction.\n   */\n  errorMessage: string\n  /**\n   * - The events for this result.\n   */\n  events: Array<Event>\n}\nexport type Provider = {\n  /**\n   * - Provider name.\n   */\n  name: string\n}\nexport type NodeVersionInfo = {\n  /**\n   * - The semver version of the node.\n   */\n  semver: string\n  /**\n   * - The commit hash of the node.\n   */\n  commit: string\n  /**\n   * - The spork id of the node.\n   */\n  sporkId: string\n  /**\n   * - The protocol version of the node.\n   */\n  protocolVersion: number\n  /**\n   * - The spork root block height of the node.\n   */\n  sporkRootBlockHeight: number\n  /**\n   * - The node root block height of the node.\n   */\n  nodeRootBlockHeight: number\n}\nexport interface StreamConnection<ChannelMap extends {[name: string]: any}> {\n  on<C extends keyof ChannelMap>(\n    channel: C,\n    listener: (data: ChannelMap[C]) => void\n  ): this\n  on(event: \"close\", listener: () => void): this\n  on(event: \"error\", listener: (err: any) => void): this\n  off<C extends keyof ChannelMap>(\n    event: C,\n    listener: (data: ChannelMap[C]) => void\n  ): this\n  off(event: \"close\", listener: () => void): this\n  off(event: \"error\", listener: (err: any) => void): this\n  close(): void\n}\n\nexport interface EventFilter {\n  eventTypes?: string[]\n  addresses?: string[]\n  contracts?: string[]\n}\n\nexport interface BlockHeartbeat {\n  blockId: string\n  blockHeight: number\n  timestamp: string\n}\n\nexport type EventStream = StreamConnection<{\n  events: Event[]\n  heartbeat: BlockHeartbeat\n}>\n\nexport * from \"./interaction\"\n"],"names":["InteractionTag","InteractionStatus","TransactionRole","InteractionResolverKind","SignatureAlgorithm","HashAlgorithm"],"mappings":"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"}