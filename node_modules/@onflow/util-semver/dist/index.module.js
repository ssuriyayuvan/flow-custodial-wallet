/*
compareIdentifiers was taken from semver package, which is licensed under ISC

GitHub: https://github.com/npm/node-semver/
NPM: https://www.npmjs.com/package/semver
License: https://github.com/npm/node-semver/blob/main/LICENSE

The ISC License

Copyright (c) Isaac Z. Schlueter and Contributors

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR
IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

var numeric = /^[0-9]+$/;
var compareIdentifiers = function compareIdentifiers(a, b) {
  var anum = numeric.test(a);
  var bnum = numeric.test(b);
  if (anum && bnum) {
    a = +a;
    b = +b;
  }
  return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
};

// Official Semver Regex https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string
var VERSION_REGEX = /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/;

/**
 * Compares two semver versions
 * @param {string} a - The first version to compare
 * @param {string} b - The second version to compare
 * @returns {number} - Returns 1 if a is greater than b, -1 if a is less than b, and 0 if they are equal
 */
var compare = function compare(a, b) {
  if (typeof a !== "string" || typeof b !== "string") throw new Error("Invalid input");
  var vsnA = a.match(VERSION_REGEX);
  var vsnB = b.match(VERSION_REGEX);
  if (!vsnA || !vsnB) throw new Error("Invalid input");
  for (var i = 1; i <= 3; i++) {
    // If either is greater than the other, return
    if (parseInt(vsnA[i]) > parseInt(vsnB[i])) return 1;
    if (parseInt(vsnA[i]) < parseInt(vsnB[i])) return -1;
  }

  // If equal, compare prerelease
  if (vsnA[4] && vsnB[4]) {
    var prereleaseA = (vsnA[4] || "").split(".");
    var prereleaseB = (vsnB[4] || "").split(".");
    for (var _i = 0; _i < Math.max(prereleaseA.length, prereleaseB.length); _i++) {
      // If one identifier has more fields than the other & the rest is equal, the one with more fields is greater
      if (prereleaseA[_i] === undefined) return -1;
      if (prereleaseB[_i] === undefined) return 1;

      // Compare field identifiers
      var cmp = compareIdentifiers(prereleaseA[_i], prereleaseB[_i]);
      if (cmp !== 0) return cmp;
    }
  }
  return 0;
};

export { compare };
//# sourceMappingURL=index.module.js.map
