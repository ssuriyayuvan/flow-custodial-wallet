{"version":3,"file":"types.module.js","sources":["../src/types.ts"],"sourcesContent":["import {log} from \"@onflow/util-logger\"\n\nexport type JsonCdc<L extends string, T> = {\n  type: L\n  value: T\n}\n\ntype JsonCdcLabel<X extends JsonCdc<string, unknown>> =\n  X extends JsonCdc<infer L, unknown> ? L : never\n\nexport interface TypeDescriptor<T, V extends JsonCdc<string, unknown>> {\n  label: JsonCdcLabel<V>\n  asArgument: (x: T) => V\n  asInjection: (x: T) => T\n}\n\nexport type TypeDescriptorInput<\n  X extends TypeDescriptor<any, JsonCdc<string, unknown>>,\n> = X extends TypeDescriptor<infer T, JsonCdc<string, unknown>> ? T : never\n\nexport interface PathValue {\n  domain: \"storage\" | \"private\" | \"public\"\n  identifier: string\n}\n\n/**\n * @deprecated Reference values cannot be imported into the Cadence interpreter, will be removed in future versions\n */\nexport interface ReferenceValue {\n  type: string\n  address: string\n}\n\n/**\n * Creates a type descriptor for a given type\n * @param label - The label for the type\n * @param asArgument - A function that converts the type to a JsonCdcType\n * @param asInjection - A function which returns the argument as is\n * @returns A type descriptor\n * @internal\n */\nconst typedef = <T, V extends JsonCdc<string, unknown>>(\n  label: JsonCdcLabel<V>,\n  asArgument: (x: T) => V,\n  asInjection: (x: T) => T\n): TypeDescriptor<T, V> => ({\n  label,\n  asArgument,\n  asInjection: (x: T) => {\n    log.deprecate({\n      pkg: \"@onflow/types\",\n      subject: `Passing in ${label} as value for ${label}`,\n      message: `Going forward, use ${label} as value for ${label}.`,\n    })\n    return asInjection(x)\n  },\n})\n\nconst isArray = <T>(d: unknown): d is T[] => Array.isArray(d)\nconst isObj = (d: unknown): d is object => typeof d === \"object\"\nconst isNull = (d: unknown): d is null | undefined => d == null\nconst isBoolean = (d: unknown): d is boolean => typeof d === \"boolean\"\nconst isNumber = (d: unknown): d is number => typeof d === \"number\"\nconst isInteger = (d: unknown): d is number => Number.isInteger(d)\nconst isString = (d: unknown): d is string => typeof d === \"string\"\n\nconst throwTypeError = (msg: unknown): never => {\n  throw new Error(\"Type Error: \" + msg)\n}\n\nconst numberValuesDeprecationNotice = (type: string) => {\n  log.deprecate({\n    pkg: \"@onflow/types\",\n    subject: `Passing in Number as value for ${type}`,\n    message: `Going forward, use String as value for ${type}.`,\n    transition:\n      \"https://github.com/onflow/flow-js-sdk/blob/master/packages/types/WARNINGS.md#0002-[U]Int*-and-Word*-as-Number\",\n  })\n}\n\nlet identityDeprecationShown = false\n/**\n * @deprecated will be removed in v2.0.0\n */\nexport const Identity = {\n  label: \"Identity\",\n  asArgument: <T>(v: T) => {\n    if (!identityDeprecationShown) {\n      log.deprecate({\n        pkg: \"@onflow/types\",\n        subject: \"Identity\",\n        message:\n          \"Identity type is deprecated and will be removed in v2.0.0.  Please remove it from your code.\",\n      })\n      identityDeprecationShown = true\n    }\n    return v\n  },\n  asInjection: <T>(v: T) => v,\n}\n\nexport const UInt = typedef(\n  \"UInt\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"UInt\")\n      return {\n        type: \"UInt\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"UInt\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected Positive Integer for type Unsigned Int\")\n  },\n  v => v\n)\n\nexport const Int = typedef(\n  \"Int\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"Int\")\n      return {\n        type: \"Int\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"Int\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected Integer for type Int\")\n  },\n  v => v\n)\n\nexport const UInt8 = typedef(\n  \"UInt8\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"UInt8\")\n      return {\n        type: \"UInt8\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"UInt8\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected integer for UInt8\")\n  },\n  v => v\n)\n\nexport const Int8 = typedef(\n  \"Int8\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"Int8\")\n      return {\n        type: \"Int8\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"Int8\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected positive integer for Int8\")\n  },\n  v => v\n)\n\nexport const UInt16 = typedef(\n  \"UInt16\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"UInt16\")\n      return {\n        type: \"UInt16\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"UInt16\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected integer for UInt16\")\n  },\n  v => v\n)\n\nexport const Int16 = typedef(\n  \"Int16\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"Int16\")\n      return {\n        type: \"Int16\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"Int16\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected positive integer for Int16\")\n  },\n  v => v\n)\n\nexport const UInt32 = typedef(\n  \"UInt32\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"UInt32\")\n      return {\n        type: \"UInt32\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"UInt32\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected integer for UInt32\")\n  },\n  v => v\n)\n\nexport const Int32 = typedef(\n  \"Int32\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"Int32\")\n      return {\n        type: \"Int32\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"Int32\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected positive integer for Int32\")\n  },\n  v => v\n)\n\nexport const UInt64 = typedef(\n  \"UInt64\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"UInt64\")\n      return {\n        type: \"UInt64\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"UInt64\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected integer for UInt64\")\n  },\n  v => v\n)\n\nexport const Int64 = typedef(\n  \"Int64\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"Int64\")\n      return {\n        type: \"Int64\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"Int64\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected positive integer for Int64\")\n  },\n  v => v\n)\n\nexport const UInt128 = typedef(\n  \"UInt128\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"UInt128\")\n      return {\n        type: \"UInt128\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"UInt128\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected integer for UInt128\")\n  },\n  v => v\n)\n\nexport const Int128 = typedef(\n  \"Int128\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"Int128\")\n      return {\n        type: \"Int128\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"Int128\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected positive integer for Int128\")\n  },\n  v => v\n)\n\nexport const UInt256 = typedef(\n  \"UInt256\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"UInt256\")\n      return {\n        type: \"UInt256\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"UInt256\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected integer for UInt256\")\n  },\n  v => v\n)\n\nexport const Int256 = typedef(\n  \"Int256\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"Int256\")\n      return {\n        type: \"Int256\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"Int256\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected integer for Int256\")\n  },\n  v => v\n)\n\nexport const Word8 = typedef(\n  \"Word8\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"Word8\")\n      return {\n        type: \"Word8\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"Word8\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected positive number for Word8\")\n  },\n  v => v\n)\n\nexport const Word16 = typedef(\n  \"Word16\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"Word16\")\n      return {\n        type: \"Word16\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"Word16\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected positive number for Word16\")\n  },\n  v => v\n)\n\nexport const Word32 = typedef(\n  \"Word32\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"Word32\")\n      return {\n        type: \"Word32\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"Word32\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected positive number for Word32\")\n  },\n  v => v\n)\n\nexport const Word64 = typedef(\n  \"Word64\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"Word64\")\n      return {\n        type: \"Word64\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"Word64\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected positive number for Word64\")\n  },\n  v => v\n)\n\nexport const Word128 = typedef(\n  \"Word128\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"Word128\")\n      return {\n        type: \"Word128\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"Word128\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected positive number for Word128\")\n  },\n  v => v\n)\n\nexport const Word256 = typedef(\n  \"Word256\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"Word256\")\n      return {\n        type: \"Word256\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"Word256\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected positive number for Word256\")\n  },\n  v => v\n)\n\nconst UFix64AndFix64NumberDeprecationNotice = () => {\n  log.deprecate({\n    subject: \"Passing in Numbers as values for Fix64 and UFix64 types\",\n    pkg: \"@onflow/types\",\n    transition:\n      \"https://github.com/onflow/flow-js-sdk/blob/master/packages/types/WARNINGS.md#0001-[U]Fix64-as-Number\",\n  })\n}\n\nexport const UFix64 = typedef(\n  \"UFix64\",\n  (v: number | string) => {\n    if (isString(v)) {\n      const vParts = v.split(\".\")\n      if (vParts.length !== 2) {\n        return throwTypeError(\n          `Expected one decimal but found ${vParts.length} in the [U]Fix64 value. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers`\n        )\n      }\n      if (vParts[1].length == 0 || vParts[1].length > 8) {\n        return throwTypeError(\n          `Expected at least one digit, and at most 8 digits following the decimal of the [U]Fix64 value but found ${vParts[1].length} digits. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers`\n        )\n      }\n\n      // make sure the number is extended to 8 decimal places so it matches cadence encoding of UFix values\n      vParts[1] = vParts[1].padEnd(8, \"0\")\n      v = vParts.join(\".\")\n\n      return {\n        type: \"UFix64\",\n        value: v,\n      }\n    } else if (isNumber(v)) {\n      UFix64AndFix64NumberDeprecationNotice()\n      return {\n        type: \"UFix64\",\n        value: v.toString(),\n      }\n    }\n    return throwTypeError(\"Expected String for UFix64\")\n  },\n  v => v\n)\n\nexport const Fix64 = typedef(\n  \"Fix64\",\n  (v: number | string) => {\n    if (isString(v)) {\n      const vParts = v.split(\".\")\n      if (vParts.length !== 2) {\n        return throwTypeError(\n          `Expected one decimal but found ${vParts.length} in the [U]Fix64 value. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers`\n        )\n      }\n      if (vParts[1].length == 0 || vParts[1].length > 8) {\n        return throwTypeError(\n          `Expected at least one digit, and at most 8 digits following the decimal of the [U]Fix64 value but found ${vParts[1].length} digits. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers`\n        )\n      }\n\n      // make sure the number is extended to 8 decimal places so it matches cadence encoding of Fix64 values\n      vParts[1] = vParts[1].padEnd(8, \"0\")\n      v = vParts.join(\".\")\n\n      return {\n        type: \"Fix64\",\n        value: v,\n      }\n    } else if (isNumber(v)) {\n      UFix64AndFix64NumberDeprecationNotice()\n      return {\n        type: \"Fix64\",\n        value: v.toString(),\n      }\n    }\n    return throwTypeError(\"Expected String for Fix64\")\n  },\n  v => v\n)\n\nexport const String = typedef(\n  \"String\",\n  (v: string) => {\n    if (isString(v))\n      return {\n        type: \"String\",\n        value: v,\n      }\n    return throwTypeError(\"Expected String for type String\")\n  },\n  v => v\n)\n\nexport const Character = typedef(\n  \"Character\",\n  (v: string) => {\n    if (isString(v))\n      return {\n        type: \"Character\",\n        value: v,\n      }\n    return throwTypeError(\"Expected Character for type Character\")\n  },\n  v => v\n)\n\nexport const Bool = typedef(\n  \"Bool\",\n  (v: boolean) => {\n    if (isBoolean(v))\n      return {\n        type: \"Bool\",\n        value: v,\n      }\n    return throwTypeError(\"Expected Boolean for type Bool\")\n  },\n  v => v\n)\n\nexport const Address = typedef(\n  \"Address\",\n  (v: string) => {\n    if (isString(v))\n      return {\n        type: \"Address\",\n        value: v,\n      }\n    return throwTypeError(\"Expected Address for type Address\")\n  },\n  v => v\n)\n\nexport const Void = typedef(\n  \"Void\",\n  (v?: null) => {\n    if (!v || isNull(v))\n      return {\n        type: \"Void\",\n        value: null,\n      }\n    return throwTypeError(\"Expected Void for type Void\")\n  },\n  v => v\n)\n\nexport const Optional = <T extends TypeDescriptor<any, any>>(children: T) =>\n  typedef(\n    \"Optional\",\n    (v?: TypeDescriptorInput<T> | null) => ({\n      type: \"Optional\",\n      value: isNull(v) ? null : children.asArgument(v),\n    }),\n    v => v\n  )\n\n/**\n * @deprecated Reference values cannot be imported into the Cadence interpreter, will be removed in future versions\n */\nexport const Reference = typedef(\n  \"Reference\",\n  (v: ReferenceValue) => {\n    if (isObj(v))\n      return {\n        type: \"Reference\",\n        value: v,\n      }\n    return throwTypeError(\"Expected Object for type Reference\")\n  },\n  v => v\n)\n\nexport const _Array = <T extends TypeDescriptor<any, any>>(\n  children: T[] | T = []\n) =>\n  typedef(\n    \"Array\",\n    (v: TypeDescriptorInput<T>[]) => {\n      return {\n        type: \"Array\",\n        value: isArray(children)\n          ? children.map((c, i) => c.asArgument(v[i]))\n          : v.map(x => children.asArgument(x)),\n      }\n    },\n    v => v\n  )\n\nexport {_Array as Array}\n\nexport const Dictionary = <\n  K extends TypeDescriptor<any, any>,\n  V extends TypeDescriptor<any, any>,\n>(\n  children:\n    | {\n        key: K\n        value: V\n      }[]\n    | {\n        key: K\n        value: V\n      } = []\n) =>\n  typedef(\n    \"Dictionary\",\n    (\n      v:\n        | {key: TypeDescriptorInput<K>; value: TypeDescriptorInput<V>}[]\n        | {key: TypeDescriptorInput<K>; value: TypeDescriptorInput<V>}\n    ) => {\n      const vIsArray = isArray(v)\n      const childrenIsArray = isArray(children)\n\n      if (isObj(v))\n        return {\n          type: \"Dictionary\",\n          value:\n            childrenIsArray && vIsArray\n              ? children.map((c, i) => ({\n                  key: c.key.asArgument(v[i].key),\n                  value: c.value.asArgument(v[i].value),\n                }))\n              : vIsArray && !childrenIsArray\n                ? v.map(x => ({\n                    key: children.key.asArgument(x.key),\n                    value: children.value.asArgument(x.value),\n                  }))\n                : !vIsArray && !childrenIsArray\n                  ? [\n                      {\n                        key: children.key.asArgument(v.key),\n                        value: children.value.asArgument(v.value),\n                      },\n                    ]\n                  : throwTypeError(\"Invalid arguments for Dictionary.\"),\n        }\n      return throwTypeError(\"Expected Object for type Dictionary\")\n    },\n    v => v\n  )\n\nexport const Event = <V extends TypeDescriptor<any, any>>(\n  id: string,\n  fields: {value: V}[] | {value: V} = []\n) =>\n  typedef(\n    \"Event\",\n    (v: {fields: {name: string; value: TypeDescriptorInput<V>}[]}) => {\n      if (isObj(v))\n        return {\n          type: \"Event\",\n          value: {\n            id: id,\n            fields: isArray(fields)\n              ? fields.map((c, i) => ({\n                  name: v.fields[i].name,\n                  value: c.value.asArgument(v.fields[i].value),\n                }))\n              : v.fields.map(x => ({\n                  name: x.name,\n                  value: fields.value.asArgument(x.value),\n                })),\n          },\n        }\n      return throwTypeError(\"Expected Object for type Event\")\n    },\n    v => v\n  )\n\nexport const Resource = <V extends TypeDescriptor<any, any>>(\n  id: string,\n  fields: {value: V}[] | {value: V} = []\n) =>\n  typedef(\n    \"Resource\",\n    (v: {fields: {name: string; value: TypeDescriptorInput<V>}[]}) => {\n      if (isObj(v))\n        return {\n          type: \"Resource\",\n          value: {\n            id: id,\n            fields: isArray(fields)\n              ? fields.map((c, i) => ({\n                  name: v.fields[i].name,\n                  value: c.value.asArgument(v.fields[i].value),\n                }))\n              : v.fields.map(x => ({\n                  name: x.name,\n                  value: fields.value.asArgument(x.value),\n                })),\n          },\n        }\n      return throwTypeError(\"Expected Object for type Resource\")\n    },\n    v => v\n  )\n\nexport const Struct = <V extends TypeDescriptor<any, any>>(\n  id: string,\n  fields: {value: V}[] | {value: V} = []\n) =>\n  typedef(\n    \"Struct\",\n    (v: {fields: {name: string; value: TypeDescriptorInput<V>}[]}) => {\n      if (isObj(v))\n        return {\n          type: \"Struct\",\n          value: {\n            id: id,\n            fields: isArray(fields)\n              ? fields.map((c, i) => ({\n                  name: v.fields[i].name,\n                  value: c.value.asArgument(v.fields[i].value),\n                }))\n              : v.fields.map(x => ({\n                  name: x.name,\n                  value: fields.value.asArgument(x.value),\n                })),\n          },\n        }\n      return throwTypeError(\"Expected Object for type Struct\")\n    },\n    v => v\n  )\n\nexport const Enum = <V extends TypeDescriptor<any, any>>(\n  id: string,\n  fields: {value: V}[] | {value: V} = []\n) =>\n  typedef(\n    \"Enum\",\n    (v: {fields: {name: string; value: TypeDescriptorInput<V>}[]}) => {\n      if (isObj(v))\n        return {\n          type: \"Enum\",\n          value: {\n            id: id,\n            fields: isArray(fields)\n              ? fields.map((c, i) => ({\n                  name: v.fields[i].name,\n                  value: c.value.asArgument(v.fields[i].value),\n                }))\n              : v.fields.map(x => ({\n                  name: x.name,\n                  value: fields.value.asArgument(x.value),\n                })),\n          },\n        }\n      return throwTypeError(\"Expected Object for type Enum\")\n    },\n    v => v\n  )\n\nexport const Path = typedef(\n  \"Path\",\n  (v: PathValue) => {\n    if (isObj(v)) {\n      if (!isString(v.domain)) {\n        return throwTypeError(\n          `Expected a string for the Path domain but found ${v.domain}. Find out more about the Path type here: https://docs.onflow.org/cadence/json-cadence-spec/#path`\n        )\n      }\n\n      if (\n        !(\n          v.domain === \"storage\" ||\n          v.domain === \"private\" ||\n          v.domain === \"public\"\n        )\n      ) {\n        return throwTypeError(\n          `Expected either \"storage\", \"private\" or \"public\" as the Path domain but found ${v.domain}. Find out more about the Path type here: https://docs.onflow.org/cadence/json-cadence-spec/#path`\n        )\n      }\n\n      if (!isString(v.identifier)) {\n        return throwTypeError(\n          `Expected a string for the Path identifier but found ${v.identifier}. Find out more about the Path type here: https://docs.onflow.org/cadence/json-cadence-spec/#path`\n        )\n      }\n\n      return {\n        type: \"Path\",\n        value: {\n          domain: v.domain,\n          identifier: v.identifier,\n        },\n      }\n    }\n    return throwTypeError(\"Expected Object for type Path\")\n  },\n  v => v\n)\n\n/**\n * InclusiveRange type\n *\n * @param t - A TypeDescriptor for the type of the range, must be a number (UInt32, Int32, etc.)\n * @returns A TypeDescriptor for an InclusiveRange of the given type\n *\n * @example\n * ```javascript\n * import * as fcl from \"@onflow/fcl\"\n * import {InclusiveRange, UInt32} from \"@onflow/types\"\n *\n * const someArg = fcl.arg({start: 1, end: 5, step: 1}, InclusiveRange(UInt32))\n * ```\n */\nexport const InclusiveRange = <T extends TypeDescriptor<any, any>>(t: T) =>\n  typedef(\n    \"InclusiveRange\",\n    (v: {\n      start: TypeDescriptorInput<T>\n      end: TypeDescriptorInput<T>\n      step: TypeDescriptorInput<T>\n    }) => {\n      if (isObj(v)) {\n        const {start, end, step} = v\n\n        return {\n          type: \"InclusiveRange\",\n          value: {\n            start: t.asArgument(start),\n            end: t.asArgument(end),\n            step: t.asArgument(step),\n          },\n        }\n      }\n      return throwTypeError(\"Expected Object for type InclusiveRange\")\n    },\n    v => v\n  )\n"],"names":["typedef","label","asArgument","asInjection","x","log","deprecate","pkg","subject","message","isArray","d","Array","isObj","isNull","isBoolean","isNumber","isInteger","Number","isString","throwTypeError","msg","Error","numberValuesDeprecationNotice","type","transition","identityDeprecationShown","Identity","v","UInt","value","toString","Int","UInt8","Int8","UInt16","Int16","UInt32","Int32","UInt64","Int64","UInt128","Int128","UInt256","Int256","Word8","Word16","Word32","Word64","Word128","Word256","UFix64AndFix64NumberDeprecationNotice","UFix64","vParts","split","length","padEnd","join","Fix64","String","Character","Bool","Address","Void","Optional","children","Reference","_Array","arguments","undefined","map","c","i","Dictionary","vIsArray","childrenIsArray","key","Event","id","fields","name","Resource","Struct","Enum","Path","domain","identifier","InclusiveRange","t","start","end","step"],"mappings":"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"}