{"version":3,"file":"types.umd.js","sources":["../src/types.ts"],"sourcesContent":["import {log} from \"@onflow/util-logger\"\n\nexport type JsonCdc<L extends string, T> = {\n  type: L\n  value: T\n}\n\ntype JsonCdcLabel<X extends JsonCdc<string, unknown>> =\n  X extends JsonCdc<infer L, unknown> ? L : never\n\nexport interface TypeDescriptor<T, V extends JsonCdc<string, unknown>> {\n  label: JsonCdcLabel<V>\n  asArgument: (x: T) => V\n  asInjection: (x: T) => T\n}\n\nexport type TypeDescriptorInput<\n  X extends TypeDescriptor<any, JsonCdc<string, unknown>>,\n> = X extends TypeDescriptor<infer T, JsonCdc<string, unknown>> ? T : never\n\nexport interface PathValue {\n  domain: \"storage\" | \"private\" | \"public\"\n  identifier: string\n}\n\n/**\n * @deprecated Reference values cannot be imported into the Cadence interpreter, will be removed in future versions\n */\nexport interface ReferenceValue {\n  type: string\n  address: string\n}\n\n/**\n * Creates a type descriptor for a given type\n * @param label - The label for the type\n * @param asArgument - A function that converts the type to a JsonCdcType\n * @param asInjection - A function which returns the argument as is\n * @returns A type descriptor\n * @internal\n */\nconst typedef = <T, V extends JsonCdc<string, unknown>>(\n  label: JsonCdcLabel<V>,\n  asArgument: (x: T) => V,\n  asInjection: (x: T) => T\n): TypeDescriptor<T, V> => ({\n  label,\n  asArgument,\n  asInjection: (x: T) => {\n    log.deprecate({\n      pkg: \"@onflow/types\",\n      subject: `Passing in ${label} as value for ${label}`,\n      message: `Going forward, use ${label} as value for ${label}.`,\n    })\n    return asInjection(x)\n  },\n})\n\nconst isArray = <T>(d: unknown): d is T[] => Array.isArray(d)\nconst isObj = (d: unknown): d is object => typeof d === \"object\"\nconst isNull = (d: unknown): d is null | undefined => d == null\nconst isBoolean = (d: unknown): d is boolean => typeof d === \"boolean\"\nconst isNumber = (d: unknown): d is number => typeof d === \"number\"\nconst isInteger = (d: unknown): d is number => Number.isInteger(d)\nconst isString = (d: unknown): d is string => typeof d === \"string\"\n\nconst throwTypeError = (msg: unknown): never => {\n  throw new Error(\"Type Error: \" + msg)\n}\n\nconst numberValuesDeprecationNotice = (type: string) => {\n  log.deprecate({\n    pkg: \"@onflow/types\",\n    subject: `Passing in Number as value for ${type}`,\n    message: `Going forward, use String as value for ${type}.`,\n    transition:\n      \"https://github.com/onflow/flow-js-sdk/blob/master/packages/types/WARNINGS.md#0002-[U]Int*-and-Word*-as-Number\",\n  })\n}\n\nlet identityDeprecationShown = false\n/**\n * @deprecated will be removed in v2.0.0\n */\nexport const Identity = {\n  label: \"Identity\",\n  asArgument: <T>(v: T) => {\n    if (!identityDeprecationShown) {\n      log.deprecate({\n        pkg: \"@onflow/types\",\n        subject: \"Identity\",\n        message:\n          \"Identity type is deprecated and will be removed in v2.0.0.  Please remove it from your code.\",\n      })\n      identityDeprecationShown = true\n    }\n    return v\n  },\n  asInjection: <T>(v: T) => v,\n}\n\nexport const UInt = typedef(\n  \"UInt\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"UInt\")\n      return {\n        type: \"UInt\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"UInt\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected Positive Integer for type Unsigned Int\")\n  },\n  v => v\n)\n\nexport const Int = typedef(\n  \"Int\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"Int\")\n      return {\n        type: \"Int\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"Int\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected Integer for type Int\")\n  },\n  v => v\n)\n\nexport const UInt8 = typedef(\n  \"UInt8\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"UInt8\")\n      return {\n        type: \"UInt8\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"UInt8\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected integer for UInt8\")\n  },\n  v => v\n)\n\nexport const Int8 = typedef(\n  \"Int8\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"Int8\")\n      return {\n        type: \"Int8\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"Int8\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected positive integer for Int8\")\n  },\n  v => v\n)\n\nexport const UInt16 = typedef(\n  \"UInt16\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"UInt16\")\n      return {\n        type: \"UInt16\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"UInt16\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected integer for UInt16\")\n  },\n  v => v\n)\n\nexport const Int16 = typedef(\n  \"Int16\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"Int16\")\n      return {\n        type: \"Int16\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"Int16\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected positive integer for Int16\")\n  },\n  v => v\n)\n\nexport const UInt32 = typedef(\n  \"UInt32\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"UInt32\")\n      return {\n        type: \"UInt32\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"UInt32\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected integer for UInt32\")\n  },\n  v => v\n)\n\nexport const Int32 = typedef(\n  \"Int32\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"Int32\")\n      return {\n        type: \"Int32\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"Int32\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected positive integer for Int32\")\n  },\n  v => v\n)\n\nexport const UInt64 = typedef(\n  \"UInt64\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"UInt64\")\n      return {\n        type: \"UInt64\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"UInt64\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected integer for UInt64\")\n  },\n  v => v\n)\n\nexport const Int64 = typedef(\n  \"Int64\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"Int64\")\n      return {\n        type: \"Int64\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"Int64\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected positive integer for Int64\")\n  },\n  v => v\n)\n\nexport const UInt128 = typedef(\n  \"UInt128\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"UInt128\")\n      return {\n        type: \"UInt128\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"UInt128\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected integer for UInt128\")\n  },\n  v => v\n)\n\nexport const Int128 = typedef(\n  \"Int128\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"Int128\")\n      return {\n        type: \"Int128\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"Int128\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected positive integer for Int128\")\n  },\n  v => v\n)\n\nexport const UInt256 = typedef(\n  \"UInt256\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"UInt256\")\n      return {\n        type: \"UInt256\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"UInt256\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected integer for UInt256\")\n  },\n  v => v\n)\n\nexport const Int256 = typedef(\n  \"Int256\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"Int256\")\n      return {\n        type: \"Int256\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"Int256\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected integer for Int256\")\n  },\n  v => v\n)\n\nexport const Word8 = typedef(\n  \"Word8\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"Word8\")\n      return {\n        type: \"Word8\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"Word8\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected positive number for Word8\")\n  },\n  v => v\n)\n\nexport const Word16 = typedef(\n  \"Word16\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"Word16\")\n      return {\n        type: \"Word16\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"Word16\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected positive number for Word16\")\n  },\n  v => v\n)\n\nexport const Word32 = typedef(\n  \"Word32\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"Word32\")\n      return {\n        type: \"Word32\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"Word32\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected positive number for Word32\")\n  },\n  v => v\n)\n\nexport const Word64 = typedef(\n  \"Word64\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"Word64\")\n      return {\n        type: \"Word64\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"Word64\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected positive number for Word64\")\n  },\n  v => v\n)\n\nexport const Word128 = typedef(\n  \"Word128\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"Word128\")\n      return {\n        type: \"Word128\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"Word128\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected positive number for Word128\")\n  },\n  v => v\n)\n\nexport const Word256 = typedef(\n  \"Word256\",\n  (v: number | string) => {\n    if (isNumber(v) && isInteger(v)) {\n      numberValuesDeprecationNotice(\"Word256\")\n      return {\n        type: \"Word256\",\n        value: v.toString(),\n      }\n    }\n    if (isString(v)) {\n      return {\n        type: \"Word256\",\n        value: v,\n      }\n    }\n    return throwTypeError(\"Expected positive number for Word256\")\n  },\n  v => v\n)\n\nconst UFix64AndFix64NumberDeprecationNotice = () => {\n  log.deprecate({\n    subject: \"Passing in Numbers as values for Fix64 and UFix64 types\",\n    pkg: \"@onflow/types\",\n    transition:\n      \"https://github.com/onflow/flow-js-sdk/blob/master/packages/types/WARNINGS.md#0001-[U]Fix64-as-Number\",\n  })\n}\n\nexport const UFix64 = typedef(\n  \"UFix64\",\n  (v: number | string) => {\n    if (isString(v)) {\n      const vParts = v.split(\".\")\n      if (vParts.length !== 2) {\n        return throwTypeError(\n          `Expected one decimal but found ${vParts.length} in the [U]Fix64 value. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers`\n        )\n      }\n      if (vParts[1].length == 0 || vParts[1].length > 8) {\n        return throwTypeError(\n          `Expected at least one digit, and at most 8 digits following the decimal of the [U]Fix64 value but found ${vParts[1].length} digits. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers`\n        )\n      }\n\n      // make sure the number is extended to 8 decimal places so it matches cadence encoding of UFix values\n      vParts[1] = vParts[1].padEnd(8, \"0\")\n      v = vParts.join(\".\")\n\n      return {\n        type: \"UFix64\",\n        value: v,\n      }\n    } else if (isNumber(v)) {\n      UFix64AndFix64NumberDeprecationNotice()\n      return {\n        type: \"UFix64\",\n        value: v.toString(),\n      }\n    }\n    return throwTypeError(\"Expected String for UFix64\")\n  },\n  v => v\n)\n\nexport const Fix64 = typedef(\n  \"Fix64\",\n  (v: number | string) => {\n    if (isString(v)) {\n      const vParts = v.split(\".\")\n      if (vParts.length !== 2) {\n        return throwTypeError(\n          `Expected one decimal but found ${vParts.length} in the [U]Fix64 value. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers`\n        )\n      }\n      if (vParts[1].length == 0 || vParts[1].length > 8) {\n        return throwTypeError(\n          `Expected at least one digit, and at most 8 digits following the decimal of the [U]Fix64 value but found ${vParts[1].length} digits. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers`\n        )\n      }\n\n      // make sure the number is extended to 8 decimal places so it matches cadence encoding of Fix64 values\n      vParts[1] = vParts[1].padEnd(8, \"0\")\n      v = vParts.join(\".\")\n\n      return {\n        type: \"Fix64\",\n        value: v,\n      }\n    } else if (isNumber(v)) {\n      UFix64AndFix64NumberDeprecationNotice()\n      return {\n        type: \"Fix64\",\n        value: v.toString(),\n      }\n    }\n    return throwTypeError(\"Expected String for Fix64\")\n  },\n  v => v\n)\n\nexport const String = typedef(\n  \"String\",\n  (v: string) => {\n    if (isString(v))\n      return {\n        type: \"String\",\n        value: v,\n      }\n    return throwTypeError(\"Expected String for type String\")\n  },\n  v => v\n)\n\nexport const Character = typedef(\n  \"Character\",\n  (v: string) => {\n    if (isString(v))\n      return {\n        type: \"Character\",\n        value: v,\n      }\n    return throwTypeError(\"Expected Character for type Character\")\n  },\n  v => v\n)\n\nexport const Bool = typedef(\n  \"Bool\",\n  (v: boolean) => {\n    if (isBoolean(v))\n      return {\n        type: \"Bool\",\n        value: v,\n      }\n    return throwTypeError(\"Expected Boolean for type Bool\")\n  },\n  v => v\n)\n\nexport const Address = typedef(\n  \"Address\",\n  (v: string) => {\n    if (isString(v))\n      return {\n        type: \"Address\",\n        value: v,\n      }\n    return throwTypeError(\"Expected Address for type Address\")\n  },\n  v => v\n)\n\nexport const Void = typedef(\n  \"Void\",\n  (v?: null) => {\n    if (!v || isNull(v))\n      return {\n        type: \"Void\",\n        value: null,\n      }\n    return throwTypeError(\"Expected Void for type Void\")\n  },\n  v => v\n)\n\nexport const Optional = <T extends TypeDescriptor<any, any>>(children: T) =>\n  typedef(\n    \"Optional\",\n    (v?: TypeDescriptorInput<T> | null) => ({\n      type: \"Optional\",\n      value: isNull(v) ? null : children.asArgument(v),\n    }),\n    v => v\n  )\n\n/**\n * @deprecated Reference values cannot be imported into the Cadence interpreter, will be removed in future versions\n */\nexport const Reference = typedef(\n  \"Reference\",\n  (v: ReferenceValue) => {\n    if (isObj(v))\n      return {\n        type: \"Reference\",\n        value: v,\n      }\n    return throwTypeError(\"Expected Object for type Reference\")\n  },\n  v => v\n)\n\nexport const _Array = <T extends TypeDescriptor<any, any>>(\n  children: T[] | T = []\n) =>\n  typedef(\n    \"Array\",\n    (v: TypeDescriptorInput<T>[]) => {\n      return {\n        type: \"Array\",\n        value: isArray(children)\n          ? children.map((c, i) => c.asArgument(v[i]))\n          : v.map(x => children.asArgument(x)),\n      }\n    },\n    v => v\n  )\n\nexport {_Array as Array}\n\nexport const Dictionary = <\n  K extends TypeDescriptor<any, any>,\n  V extends TypeDescriptor<any, any>,\n>(\n  children:\n    | {\n        key: K\n        value: V\n      }[]\n    | {\n        key: K\n        value: V\n      } = []\n) =>\n  typedef(\n    \"Dictionary\",\n    (\n      v:\n        | {key: TypeDescriptorInput<K>; value: TypeDescriptorInput<V>}[]\n        | {key: TypeDescriptorInput<K>; value: TypeDescriptorInput<V>}\n    ) => {\n      const vIsArray = isArray(v)\n      const childrenIsArray = isArray(children)\n\n      if (isObj(v))\n        return {\n          type: \"Dictionary\",\n          value:\n            childrenIsArray && vIsArray\n              ? children.map((c, i) => ({\n                  key: c.key.asArgument(v[i].key),\n                  value: c.value.asArgument(v[i].value),\n                }))\n              : vIsArray && !childrenIsArray\n                ? v.map(x => ({\n                    key: children.key.asArgument(x.key),\n                    value: children.value.asArgument(x.value),\n                  }))\n                : !vIsArray && !childrenIsArray\n                  ? [\n                      {\n                        key: children.key.asArgument(v.key),\n                        value: children.value.asArgument(v.value),\n                      },\n                    ]\n                  : throwTypeError(\"Invalid arguments for Dictionary.\"),\n        }\n      return throwTypeError(\"Expected Object for type Dictionary\")\n    },\n    v => v\n  )\n\nexport const Event = <V extends TypeDescriptor<any, any>>(\n  id: string,\n  fields: {value: V}[] | {value: V} = []\n) =>\n  typedef(\n    \"Event\",\n    (v: {fields: {name: string; value: TypeDescriptorInput<V>}[]}) => {\n      if (isObj(v))\n        return {\n          type: \"Event\",\n          value: {\n            id: id,\n            fields: isArray(fields)\n              ? fields.map((c, i) => ({\n                  name: v.fields[i].name,\n                  value: c.value.asArgument(v.fields[i].value),\n                }))\n              : v.fields.map(x => ({\n                  name: x.name,\n                  value: fields.value.asArgument(x.value),\n                })),\n          },\n        }\n      return throwTypeError(\"Expected Object for type Event\")\n    },\n    v => v\n  )\n\nexport const Resource = <V extends TypeDescriptor<any, any>>(\n  id: string,\n  fields: {value: V}[] | {value: V} = []\n) =>\n  typedef(\n    \"Resource\",\n    (v: {fields: {name: string; value: TypeDescriptorInput<V>}[]}) => {\n      if (isObj(v))\n        return {\n          type: \"Resource\",\n          value: {\n            id: id,\n            fields: isArray(fields)\n              ? fields.map((c, i) => ({\n                  name: v.fields[i].name,\n                  value: c.value.asArgument(v.fields[i].value),\n                }))\n              : v.fields.map(x => ({\n                  name: x.name,\n                  value: fields.value.asArgument(x.value),\n                })),\n          },\n        }\n      return throwTypeError(\"Expected Object for type Resource\")\n    },\n    v => v\n  )\n\nexport const Struct = <V extends TypeDescriptor<any, any>>(\n  id: string,\n  fields: {value: V}[] | {value: V} = []\n) =>\n  typedef(\n    \"Struct\",\n    (v: {fields: {name: string; value: TypeDescriptorInput<V>}[]}) => {\n      if (isObj(v))\n        return {\n          type: \"Struct\",\n          value: {\n            id: id,\n            fields: isArray(fields)\n              ? fields.map((c, i) => ({\n                  name: v.fields[i].name,\n                  value: c.value.asArgument(v.fields[i].value),\n                }))\n              : v.fields.map(x => ({\n                  name: x.name,\n                  value: fields.value.asArgument(x.value),\n                })),\n          },\n        }\n      return throwTypeError(\"Expected Object for type Struct\")\n    },\n    v => v\n  )\n\nexport const Enum = <V extends TypeDescriptor<any, any>>(\n  id: string,\n  fields: {value: V}[] | {value: V} = []\n) =>\n  typedef(\n    \"Enum\",\n    (v: {fields: {name: string; value: TypeDescriptorInput<V>}[]}) => {\n      if (isObj(v))\n        return {\n          type: \"Enum\",\n          value: {\n            id: id,\n            fields: isArray(fields)\n              ? fields.map((c, i) => ({\n                  name: v.fields[i].name,\n                  value: c.value.asArgument(v.fields[i].value),\n                }))\n              : v.fields.map(x => ({\n                  name: x.name,\n                  value: fields.value.asArgument(x.value),\n                })),\n          },\n        }\n      return throwTypeError(\"Expected Object for type Enum\")\n    },\n    v => v\n  )\n\nexport const Path = typedef(\n  \"Path\",\n  (v: PathValue) => {\n    if (isObj(v)) {\n      if (!isString(v.domain)) {\n        return throwTypeError(\n          `Expected a string for the Path domain but found ${v.domain}. Find out more about the Path type here: https://docs.onflow.org/cadence/json-cadence-spec/#path`\n        )\n      }\n\n      if (\n        !(\n          v.domain === \"storage\" ||\n          v.domain === \"private\" ||\n          v.domain === \"public\"\n        )\n      ) {\n        return throwTypeError(\n          `Expected either \"storage\", \"private\" or \"public\" as the Path domain but found ${v.domain}. Find out more about the Path type here: https://docs.onflow.org/cadence/json-cadence-spec/#path`\n        )\n      }\n\n      if (!isString(v.identifier)) {\n        return throwTypeError(\n          `Expected a string for the Path identifier but found ${v.identifier}. Find out more about the Path type here: https://docs.onflow.org/cadence/json-cadence-spec/#path`\n        )\n      }\n\n      return {\n        type: \"Path\",\n        value: {\n          domain: v.domain,\n          identifier: v.identifier,\n        },\n      }\n    }\n    return throwTypeError(\"Expected Object for type Path\")\n  },\n  v => v\n)\n\n/**\n * InclusiveRange type\n *\n * @param t - A TypeDescriptor for the type of the range, must be a number (UInt32, Int32, etc.)\n * @returns A TypeDescriptor for an InclusiveRange of the given type\n *\n * @example\n * ```javascript\n * import * as fcl from \"@onflow/fcl\"\n * import {InclusiveRange, UInt32} from \"@onflow/types\"\n *\n * const someArg = fcl.arg({start: 1, end: 5, step: 1}, InclusiveRange(UInt32))\n * ```\n */\nexport const InclusiveRange = <T extends TypeDescriptor<any, any>>(t: T) =>\n  typedef(\n    \"InclusiveRange\",\n    (v: {\n      start: TypeDescriptorInput<T>\n      end: TypeDescriptorInput<T>\n      step: TypeDescriptorInput<T>\n    }) => {\n      if (isObj(v)) {\n        const {start, end, step} = v\n\n        return {\n          type: \"InclusiveRange\",\n          value: {\n            start: t.asArgument(start),\n            end: t.asArgument(end),\n            step: t.asArgument(step),\n          },\n        }\n      }\n      return throwTypeError(\"Expected Object for type InclusiveRange\")\n    },\n    v => v\n  )\n"],"names":["typedef","label","asArgument","asInjection","x","log","deprecate","pkg","subject","message","isArray","d","Array","isObj","isNull","isBoolean","isNumber","isInteger","Number","isString","throwTypeError","msg","Error","numberValuesDeprecationNotice","type","transition","identityDeprecationShown","Identity","v","UInt","value","toString","Int","UInt8","Int8","UInt16","Int16","UInt32","Int32","UInt64","Int64","UInt128","Int128","UInt256","Int256","Word8","Word16","Word32","Word64","Word128","Word256","UFix64AndFix64NumberDeprecationNotice","UFix64","vParts","split","length","padEnd","join","Fix64","String","Character","Bool","Address","Void","Optional","children","Reference","_Array","arguments","undefined","map","c","i","Dictionary","vIsArray","childrenIsArray","key","Event","id","fields","name","Resource","Struct","Enum","Path","domain","identifier","InclusiveRange","t","start","end","step"],"mappings":"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"}