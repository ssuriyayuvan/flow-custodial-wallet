export function isFn(d: any): boolean;
export type CurrentUser = import("@onflow/typedefs").CurrentUser;
export type CompositeSignature = import("@onflow/typedefs").CompositeSignature;
export function getCurrentUser({ platform }: {
    platform: any;
}): {
    (): {
        authenticate: (arg0: any) => any;
        unauthenticate: typeof unauthenticate;
        authorization: Promise<object>;
        signUserMessage: Promise<import("@onflow/typedefs").CompositeSignature[]>;
        subscribe: typeof subscribe;
        snapshot: typeof snapshot;
        resolveArgument: Promise<Function>;
    };
    authenticate: (arg0: any) => any;
    unauthenticate: typeof unauthenticate;
    authorization: Promise<object>;
    signUserMessage: Promise<import("@onflow/typedefs").CompositeSignature[]>;
    subscribe: typeof subscribe;
    snapshot: typeof snapshot;
    resolveArgument: Promise<Function>;
};
/**
 * @description - Unauthenticate a user
 * @returns {void}
 */
declare function unauthenticate(): void;
/**
 * @description
 * The callback passed to subscribe will be called when the user authenticates and un-authenticates, making it easy to update the UI accordingly.
 *
 * @param {Function} callback - Callback function
 * @returns {Function} - Unsubscribe function
 */
declare function subscribe(callback: Function): Function;
/**
 * @description - Gets the current user
 * @returns {Promise<CurrentUser>} - User object
 */
declare function snapshot(): Promise<CurrentUser>;
export {};
